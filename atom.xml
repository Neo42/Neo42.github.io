<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>墨石</title>
  
  <subtitle>May Muses follows you.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://neo42.github.io/"/>
  <updated>2019-10-14T12:15:38.235Z</updated>
  <id>http://neo42.github.io/</id>
  
  <author>
    <name>墨石</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【译】可变变量 - MDN Web 名词解释</title>
    <link href="http://neo42.github.io/2019/10/14/2019-10-14-mdn-mutable/"/>
    <id>http://neo42.github.io/2019/10/14/2019-10-14-mdn-mutable/</id>
    <published>2019-10-13T16:00:00.000Z</published>
    <updated>2019-10-14T12:15:38.235Z</updated>
    
    <content type="html"><![CDATA[<p>可变变量是一种可以被修改的变量。在 JavaScript 中，只有对象和数组是可变的，原始类型不是。</p><p>（您可以使变量名称指向一个新值，但先前的值仍保留在内存中。因此需要进行垃圾回收。）</p><p>可变对象是一旦创建即可修改其状态的对象。</p><p>不可变对象是一旦创建便无法更改其状态的对象。</p><p>字符串和数字是不可变的。我们用一个例子来理解这一点：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> immutableString =“ Hello”;</span><br><span class="line"></span><br><span class="line"><span class="comment">//我们上面的代码中创建了一个带有字符串值的新对象。</span></span><br><span class="line"></span><br><span class="line">immutableString = immutableString + <span class="string">"World"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//现在，我们将 “World” 附加到现有值上。</span></span><br></pre></td></tr></table></figure><p>在将“ immutableString”附加到字符串值后，将发生以下事件：</p><ol><li>检索<code>immutableString</code>的现有值</li><li>“World” 被附加到<code>immutableString</code>的现有值之后</li><li>结果值被分配给新的内存块</li><li><code>immutableString</code>对象指向新创建的内存空间</li><li>以前创建的内存空间现在可以被垃圾回收了。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;可变变量是一种可以被修改的变量。在 JavaScript 中，只有对象和数组是可变的，原始类型不是。&lt;/p&gt;
&lt;p&gt;（您可以使变量名称指向一个新值，但先前的值仍保留在内存中。因此需要进行垃圾回收。）&lt;/p&gt;
&lt;p&gt;可变对象是一旦创建即可修改其状态的对象。&lt;/p&gt;
&lt;p&gt;不可
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>尝试理解Redux</title>
    <link href="http://neo42.github.io/2019/09/18/2019-9-5-tap-into-redux/"/>
    <id>http://neo42.github.io/2019/09/18/2019-9-5-tap-into-redux/</id>
    <published>2019-09-17T17:36:59.375Z</published>
    <updated>2019-09-17T17:36:59.375Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最近在 Redux，光听别人讲总觉得半懂不懂，也很难记住，干脆自己试着写篇东西梳理一下。但在学习 Redux 之前，我们有必要明白 Redux 是什么、有什么用。官方对于 Redux 的定义是个不错的入手点。</p></blockquote><a id="more"></a><blockquote><p><strong>Redux 是一个 JavaScript 应用的可预测的状态容器。</strong></p></blockquote><p>乍看这句话还挺难懂的，我们可以把这句话拆开来理解。这句话其实是对 Redux 的作用做了个总结。换句话说，我们可以把这个定义看作是官方对于这个问题 的解答：</p><blockquote><p>Redux 要（尝试）解决谁的什么问题？它是怎么（尝试）去解决的？</p></blockquote><ul><li>谁的问题 —— JavaScript 应用</li><li>什么问题 —— 状态（管理）</li><li>怎么解决 —— （状态）可预测、容器</li></ul><p><strong>JavaScript 应用</strong></p><p>Javascript 应用这个概念，写过 <code>console.log(&#39;Hello World&#39;)</code> 的应该都理解是什么意思，所以它的含义我就不赘述了。但值得注意的是，这里的 Javascript 应用<strong>包括且不限于 React 应用</strong>，也就是说 Redux 不止可以和 React 合用，还可以跟其他框架、库甚至原生 JS 合用。</p><p><strong>状态(管理)</strong></p><!-- 可预测、JavaScript 应用、状态、容器。 --><p><strong>首先，什么是状态？</strong>各位学过 React 的应该都知道 State 和 Props 的概念。然而尽管这两个词看起来好像挺熟悉，但要是真的让你解释二者的区别，似乎也不太容易。这里不妨把 Props 和 State 做个对比，以便理解。</p><p>先来看几句话。</p><blockquote><p>一句话概括，props 是组件对外的接口，state 是组件对内的接口。<div style="text-align: right">—— 徐超<a href="https://book.douban.com/subject/30210697/" target="_blank" rel="noopener">《React 进阶之路》</a> </div></p><p>React 组件中的 props 是其父组件传入的变量。而 state 也是变量，不过是直接在组件内初始化而且受组件自身管理。<div style="text-align: right">—— <a href="https://twitter.com/flaviocopes" target="_blank" rel="noopener">Flavio Copes</a></div></p><p>“props”(property 的简写)是一个外界任意输入的对象，被 React 函数组件作为第一个参数接收。“state”是随着某一 React 组件的生命周期变化的数据。<div style="text-align: right">—— <a href="https://twitter.com/kentcdodds" target="_blank" rel="noopener">Kent C Dodds</a></div></p><p>用 state 储存你当前的页面在控制器-视图中所需的数据；用 props 把数据和事件监听器向下传入你的子组件。<div style="text-align: right">——<a href="https://stackoverflow.com/questions/27991366/what-is-the-difference-between-state-and-props-in-react/32186324#32186324" target="_blank" rel="noopener">StackOverflow</a></div></p></blockquote><p>可见，Props 通常与父子组件的沟通有关，而 state 与组件自身有关。React 官方文档中当然也有介绍 props 和 state，在讲解这两个概念时，文档并没有单独去分别解释 props 和 state 是什么意思，而是各自搭配了一个概念。props 搭配 component，state 则搭配 lifecycle。这样，两者的关系就清楚了。</p><p>先说状态：</p><ul><li>状态就是组件自身所需的、储存在组件内部的数据。</li><li>状态是可变的，但只能在组件内部进行修改而不能从外部被修改。</li><li>状态会随着某一组件实例的生命周期不断变化。</li><li>与 props 相比性能较差。</li></ul><p>另一方面，props 是这样的：</p><ul><li>props 通常是外界（父组件、用户等）传入的数据。</li><li>不可变。这一点使 React 能够快速检查引用（reference）。</li><li>性能较好。所以被作为一般父组件向子组件传入沟通数据和事件监听器的方式。</li></ul><p>理解了 state 和 props 的各自的含义和区别，我们自然可以问出这个问题。</p><blockquote><p><strong>什么样的组件应该使用状态呢？</strong></p><p><strong>包含负责响应用户输入、服务器请求逻辑的组件。</strong>其实应用中的大部分组件只需要接收、渲染数据就可以了，所以很多开发者都倾向于把这部分组件写成无状态的函数组件，而把状态用于内部包含逻辑的少数几个组件里，这样也可以简化代码的理解难度。状态里储存的数据应该是随着用户交互、服务器请求等事件变化从而引发 UI 变更的数据。</p></blockquote><p>再接下来，<strong>状态管理为什么会成为问题？</strong></p><p>要回答这个问题我们还是应该从状态变化的原因上来找答案。</p><p>在现在前端工程中，一个应用，尤其是一个单页应用的状态很容易就变得非常复杂。传统架构中的状态数据的流动是在视图（view）和模型（model）或视图与视图之间直接进行的。状态中的一部分会通过 Ajax 或者 Websocket 到达前端，而很多状态跟后端服务器并没有关系。很多状态会在各个组件中<strong>共享、传递</strong>（比如 MVC 架构）。组件间的复杂关系导致<strong>应用状态数据支离破碎，缺少一个统一的分配方式</strong>。另一个问题是状态在组件之间的多层渗透会导致<strong>渲染成本增加、效率下降</strong>，从而影响用户体验。</p><p><img src="https://ae01.alicdn.com/kf/H8f802aef84a44c5a9809d1fa160cf8f8f.jpg" alt="model-component"></p><p><strong>可预测</strong></p><blockquote><p>跟随着 Flux、CQRS 和事件溯源的脚步，Redux 尝试通过在状态变更的时间和方式上强制施加一些限制，从而实现状态变更的可预测。<div style="text-align: right">——<a href="https://redux.js.org/introduction/motivation" target="_blank" rel="noopener">介绍 Redux：目的</a></div></p></blockquote><p>我们把前文所说的那些问题综合起来看就是 Redux 官方文档中说的<strong>状态变更时间和方式</strong>的<strong>不可预测性</strong>。如果能把状态数据<strong>何时改变</strong>和<strong>如何改变</strong>固定起来就好了。为了做到这一点， Redux 主要借鉴了 Facebook 在 2014 年推出的 Flux 架构。</p><h3 id="What-the-hell-is-Flux"><a href="#What-the-hell-is-Flux" class="headerlink" title="What the hell is Flux?"></a>What the hell is Flux?</h3><p>首先说明，Flux 不是框架，而是一种架构思想。但是因为 ，很容易出现前文提到过的那些问题，所以 Facebook 放弃了 MVC 架构，转而使用 Flux。实际上，Flux 是和 React 同时出现的，而 React 自己也采用了 Flux。Flux 最大特点就是数据的单向流动。它在模型和视图之间设置了一条<strong>单向轨道</strong>（如下）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">View</span><br><span class="line">-&gt; action -&gt; dispatcher -&gt; store -&gt; view</span><br><span class="line">-&gt; action -&gt; dispatcher -&gt; store -&gt; view</span><br><span class="line">-&gt; action -&gt; dispatcher -&gt; ..... -&gt; view</span><br></pre></td></tr></table></figure><p>或者你可以按照这张图理解：<br><img src="https://ae01.alicdn.com/kf/Had8f008ec7ce42a7ac55fde3635cf6afE.jpg" alt="Flux"></p><p>数据如果要从模型到达视图就必须经过 action、dispatcher、store 这几个部分。这条轨道是如何实现的呢？</p><p>Flux 中一切数据流动的起点是<code>action</code>（行动）。<code>action</code>是什么？就是一个对象而已。它有什么用呢？Flux 就是依靠识别不同的<code>action</code>决定该如何变更状态数据的，以此来固定状态变更的时间和方式。因此你可以把<code>action</code>理解成<strong>命令、指令</strong>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  type: <span class="string">'ADD_TODO'</span>,</span><br><span class="line">  payload: &#123;</span><br><span class="line">    text: <span class="string">'Do something.'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据 Facebook 官方的 <a href="https://github.com/redux-utilities/flux-standard-action#example" target="_blank" rel="noopener">Flux 标准 Action</a>，一个<code>action</code>对象必须是一个普通的 Javascript 对象，且必须包含一个名为<code>type</code>（类型）的属性，这个属性必须是一个普通的字符串，而这个<code>type</code>就是用来供 Flux 识别的<code>action</code>身份的。怎么识别呢？之后我们讲到 dispatcher 时再说。<code>action</code>还有一个重要属性：<code>payload</code>(其实还有两个可选属性<code>error</code>、<code>meta</code>，这里我们只讲<code>payload</code>)其中包含了某些状态变更函数所需的新数据。收到不同的 action 就会对应执行不同的状态变更的。</p><ul><li>一个对象：全局状态树让需要主动取用状态数据的组件可以直接访问到数据源，而不需要组件间数据的传递。</li><li>多个属性：状态数据</li><li>多个方法：<ul><li>:返回属性中的状态数据</li><li>emitChange：</li><li>changeData：实现数据变更所需的 callback 函数（How），之后每个 callback 会对应一个 action。</li><li>emitChange：通过 emitter 提交变更的函数。</li></ul></li></ul><h4 id="Dispatcher（分发器）"><a href="#Dispatcher（分发器）" class="headerlink" title="Dispatcher（分发器）"></a>Dispatcher（分发器）</h4><p>dispatcher.register: 参数是一个以 action 为参数的回调函数，这个函数用一个 switch 语句把所有可能用到的 store 中 callback 的调用规则按照不同的 action 类型组织起来。这个过程被称为 registration。可见 dispatcher 是任务分配的中心，你可以把它理解成十字路口的红绿灯。函数最后会调用 store 的 emitChange 方法，通知组件上的变化监听器，之后组件会做出相应的更新动作。dispatcher.dispatch 以 action 为参数，返回 store 中对应的 callback，之后直接可以拿到组建上使用。this.on(‘change’, ListStore.getAll()); 监听 dispatched action 引发的 store 的 emitChange 函数</p><iframe src="https://codesandbox.io/embed/flux-example-kp01g?fontsize=14" title="flux-example" allow="geolocation; microphone; camera; midi; vr; accelerometer; gyroscope; payment; ambient-light-sensor; encrypted-media; usb" style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;" sandbox="allow-modals allow-forms allow-popups allow-scripts allow-same-origin"></iframe>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;最近在 Redux，光听别人讲总觉得半懂不懂，也很难记住，干脆自己试着写篇东西梳理一下。但在学习 Redux 之前，我们有必要明白 Redux 是什么、有什么用。官方对于 Redux 的定义是个不错的入手点。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>CSS筛选器Cheat Sheet</title>
    <link href="http://neo42.github.io/2019/08/16/2019-8-16-css-selector-cheat-sheet/"/>
    <id>http://neo42.github.io/2019/08/16/2019-8-16-css-selector-cheat-sheet/</id>
    <published>2019-08-16T04:37:00.000Z</published>
    <updated>2019-09-09T14:42:25.400Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>MDN 常用 CSS 筛选器的总结。</p></blockquote><a id="more"></a><div class="table-container"><table><thead><tr><th>例子</th><th>描述</th></tr></thead><tbody><tr><td><code>h1</code></td><td>元素名称</td></tr><tr><td><code>#root</code></td><td><code>id</code></td></tr><tr><td><code>.container</code></td><td><code>class</code></td></tr><tr><td><code>button .info-button</code></td><td>带有 <code>class</code> 的元素</td></tr><tr><td><code>#root button</code></td><td><code>#root</code> 中的所有 <code>&lt;button&gt;</code></td></tr><tr><td><code>div,span</code></td><td>并列选择</td></tr><tr><td><code>*</code></td><td>所有元素</td></tr><tr><td><code>p *</code></td><td>所有 <code>&lt;p&gt;</code></td></tr><tr><td><code>p+div</code></td><td>紧跟在 <code>&lt;p&gt;</code> 后的 div</td></tr><tr><td><code>.title~p</code></td><td>.title 之后的所有同层级 <code>&lt;p&gt;</code></td></tr><tr><td><code>a&gt;b</code></td><td><code>&lt;a&gt;</code> 中的直接子元素 <code>&lt;b&gt;</code></td></tr><tr><td><code>div p</code></td><td>div 中的所有(直接或间接)<code>&lt;p&gt;</code></td></tr><tr><td><code>a:active</code></td><td>激活：Tab 键或鼠标左键交互时 包括但不限于<code>&lt;button&gt;&lt;a&gt;</code></td></tr><tr><td><code>input:checked</code></td><td>选项输入框被勾选时</td></tr><tr><td><code>input:default</code></td><td>表单默认值<code>&lt;button&gt;</code>、<code>&lt;input&gt;</code></td></tr><tr><td><code>input:disabled</code></td><td>被禁用时</td></tr><tr><td><code>div:empty</code></td><td>没有子元素时</td></tr><tr><td><code>p:first-child</code></td><td>所有 <code>&lt;p&gt;</code> 元素中身为其父元素的第一个子元素的元素 （而不是 p 中包含的第一个子元素）</td></tr><tr><td><code>p:first-of-type</code></td><td>同类元素中的第一个</td></tr><tr><td><code>input:focus</code></td><td>输入框被鼠标点中或者 tab 键</td></tr><tr><td><code>input:invalid</code></td><td>未通过验证的 <code>&lt;input&gt;</code> 或其他 <code>&lt;form&gt;</code> 元素</td></tr><tr><td><code>tr:nth-child(odd)/(even)</code></td><td>HTML 表格中的奇数/偶数行。</td></tr><tr><td><code>p:only-child</code></td><td><code>&lt;p&gt;</code> 中身为其父元素的唯一子元素的元素</td></tr><tr><td><code>input:required</code></td><td>带有 <code>required</code> 属性的表单元素</td></tr></tbody></table></div>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;MDN 常用 CSS 筛选器的总结。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>在Github Page上部署Create React App</title>
    <link href="http://neo42.github.io/2019/08/07/2019-8-7-deploy-create-react-app/"/>
    <id>http://neo42.github.io/2019/08/07/2019-8-7-deploy-create-react-app/</id>
    <published>2019-08-07T14:57:00.000Z</published>
    <updated>2019-10-19T08:30:23.599Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>学习 React 时可以用 Github Pages 部署自己的小项目，所以稍微总结一下，方便以后参考。</p></blockquote><a id="more"></a><h2 id="添加主页"><a href="#添加主页" class="headerlink" title="添加主页"></a>添加主页</h2><p>在 package.json 中添加<code>homepage</code>属性</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">"name": "My-CRA",</span><br><span class="line">"homepage": "https://neo42.github.io/mycra",</span><br><span class="line">"version": "0.1.0",</span><br></pre></td></tr></table></figure><h2 id="安装-gh-pages"><a href="#安装-gh-pages" class="headerlink" title="安装 gh-pages"></a>安装 gh-pages</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i gh-pages</span><br></pre></td></tr></table></figure><h2 id="部署脚本"><a href="#部署脚本" class="headerlink" title="部署脚本"></a>部署脚本</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">"scripts":&#123;</span><br><span class="line"> "predeploy": "npm run build",</span><br><span class="line"> "deploy": "gh-pages -d build",</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行部署命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run deploy</span><br></pre></td></tr></table></figure><h2 id="提交一个-commit-到-repo"><a href="#提交一个-commit-到-repo" class="headerlink" title="提交一个 commit 到 repo"></a>提交一个 commit 到 repo</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add . &amp;&amp; git commit -m <span class="string">"Deploy to Github Pages"</span> &amp;&amp; git push <span class="comment"># mac</span></span><br><span class="line">git add . | git commit -m <span class="string">"Deploy to Github Pages"</span> | git push <span class="comment"># windows</span></span><br></pre></td></tr></table></figure><h2 id="设置-Github-Pages-的源"><a href="#设置-Github-Pages-的源" class="headerlink" title="设置 Github Pages 的源"></a>设置 Github Pages 的源</h2><p>把 <code>source</code> 设置为 <code>gh-pages branch</code></p><p><img src="https://reactgo.com/static/f1b680b3a2d43d59ea55047e89a39948/74755/react-ghpages-setup.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;学习 React 时可以用 Github Pages 部署自己的小项目，所以稍微总结一下，方便以后参考。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>【译】焦虑是自由的晕眩</title>
    <link href="http://neo42.github.io/2019/07/16/anxiety/"/>
    <id>http://neo42.github.io/2019/07/16/anxiety/</id>
    <published>2019-07-15T16:00:00.000Z</published>
    <updated>2019-09-24T16:59:57.609Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>译自 Ted Chiang 的 Anxiety is The Dizziness of Freedom。</p></blockquote><a id="more"></a><p>Nat 本想抽根烟的，但公司规定店内禁止吸烟，所以她能做的只有变得越来越紧张。 现在是凌晨，还有一刻钟到 4 点，莫罗还没有回来。 她不知道要是他到时候还没回来，她该怎么解释。 她给他发了条短信，问他在哪儿。</p><p>随着一阵门铃响声，前门被打开了。但进来的不是莫罗，而是个穿橙色毛衣的男的。“你好？我有个棱镜(prism)要卖。”</p><p>Nat 收起手机：“一起看下吧。”</p><p>他过来把棱镜放在柜台上；是个新型号，公文包大小。 Nat 甩了下棱镜，使之转了一圈，看了看另一头显示的读数：激活日期就在六个月前，超过 90％的 pad 都还能用。 她把键盘展开，显示器映入眼帘。按下“在线”按钮，然后等着。 一分钟过去了。</p><p>“他可能堵在路上了。”橙色毛衣不确定地说。</p><p>“没事。”Nat 说。</p><p>又过了一分钟，“准备就绪”灯光亮起。Nat 用键盘输入：“键盘测试”。几秒种后她答道：“看起来不错”。她切换到视频模式，屏幕上的字不见了，取而代之的是一幅颗粒状的影像，是她自己的脸，与她对视着。另一个她冲着她点头说道：“麦克风测试。”</p><p>“清晰响亮，”她回答说。</p><p>屏幕又切回了文本。Nat 当时没留意另一个她戴着的那条项链；要是他们最后真的把棱镜买下来了，她一定会问她那是在哪买的。她回头看着那个穿橙色毛衣的男的，给他报了个价。</p><p>他明显很失望。“就这么点？”</p><p>“就值这个价。”</p><p>“我还以为这玩意儿买的时间越长越值钱呢。”</p><p>“没错，但是不会这么快的呀。要是这件是五年前产的，咱这价格肯定就不能这么算了。”</p><p>“那如果另一个分支上有些很有意思的事儿呢？”</p><p>“嗯，那样的话确实是能值些钱的。”Nat 指着他的棱镜。“另一个分支上真的有什么有意思的事儿吗？”</p><p>“我…不知道。”</p><p>“如果您想要个更好的价格，就得您自己先研究研究，再拿到我们这儿来。”</p><p>橙色毛衣犹豫了。</p><p>“要是您想再仔细考虑考虑之后再来的话，我们随时恭候。”</p><p>“你能等我一会儿吗？”</p><p>“时间您说了算。”</p><p>橙色毛衣来到键盘前，跟他的平行自我互相简单地敲了会儿键盘。事毕，他说道：“谢了，我们稍后回来。”他把棱镜折起来，然后离开了。</p><p>商店里的最后一名顾客已经聊完并准备付账。Nat 来到他用过的隔间，检查了一下棱镜的数据用量，然后把棱镜搬回了储藏室。正当她挂断打给他的电话之时，那三个四点有预约的顾客来了，其中包括让莫罗带棱镜给他的那个人。“稍等一下”，她告诉他们，“一会儿我会给你们开隔间的。”她到储藏室，给其他两位顾客搬来了棱镜。她刚为他们布置好了隔间，莫罗就从前门进来了，胳膊肘夹着一个装键盘用的大纸箱。她在柜台跟他碰了头。</p><p>“你差点就没赶上。”她小声说，眼睛一直瞪着他。</p><p>“好好好，我知道日程。”</p><p>莫罗把大纸箱带到储藏室，一会儿又搬着一台棱镜出来了。他为第三位顾客布置好了隔间——这时距离四点就只剩几秒钟了。四点整，三台棱镜上的“准备就绪”灯都亮了起来，全部三位顾客都和他们的平行自我们聊上了。</p><p>Nat 跟在莫罗身后进了前台后面的办公室。他若无其事地一屁股坐在桌子跟前。“那么…”她问道：“你怎么去了这么久？”</p><p>“我当时在本部跟一个助手聊天。”莫罗回来之前刚见过他们的一个客户。杰西卡·奥尔森是个没有什么朋友的七十多岁的寡妇。她有一个独子，与其说他是个慰藉，倒不如说是个负担。将近一年前她开始每周过来一次跟她自己聊天；她总是预约一个私密隔间以便使用语音聊天。几个月前她在一次严重的摔伤中摔断了髋骨，于是现在她就只能待在养老院了。因为她没办法再来商店了，莫罗只好每周都给她带个棱镜过去好让她继续日常跟自己的对话；这其实是违反自聊公司的政策的，不过她掏了钱请他帮她这个忙。“他跟我讲了讲奥尔森夫人的近况。”</p><p>“怎么样？”</p><p>“她最近得了肺炎，”莫罗说。“他说自从那次摔伤之后发生了很多事。”</p><p>“真的？髋骨骨折怎么会引起肺炎的？”</p><p>“那个人说因为他们不怎么活动身体，于是就氧中毒了，所以他们从来做不了深呼吸。总之，奥尔森夫人肯定得肺炎了。”</p><p>“严重吗？”</p><p>“那助手觉得她再过一个月就会死掉，最多两个月。”</p><p>“喔…那可太糟了。”</p><p>“对。”莫罗用他的又平又方的指头挠了挠下巴。“不过这倒让我有了个主意。”</p><p>莫罗能说出这种话一点都不足为奇。“所以这次又是什么鬼？”</p><p>“这次不用你帮我。我自己能应付。”</p><p>“那我没问题。我手头要忙的事儿已经够多了。”</p><p>“对哦，你今天有个约会。怎么样?”</p><p>Nat 耸了耸肩。“难说。不过我觉得已经有些进展了。”</p><hr><p>棱镜(prism)这个名字是它原名的近似缩写——“普拉加世界间信号收发装置”。每台棱镜都有两个 LED 灯泡，一红一蓝。棱镜启动后，装置内部会进行一种量子测算，之后会产生两种概率相同的结果：红色灯泡亮起代表一种结果，蓝灯亮起则代表另一种。从那一刻开始，棱镜就能让信息在普适波函数的两个分支之间传播。如果用口语表述，就是说棱镜创建了两条刚刚分叉的时间线，一条的内部亮着红灯，另一条里亮着蓝灯，而棱镜可以实现两条时间线之间的相互交流。</p><p>棱镜使用一系列离子实现信息的交换，而这些离子各自被储存在棱镜中的磁力陷阱中。棱镜一旦被激活，普适波函数就会分出两个分支，这些离子会保持一种连贯一致的重叠状态，并在一条刀刃上保持着平衡，而又与两个分支紧密相连。每个离子可以从一支向另一支传输一比特的信息，一条是或者一个否。而要读取那条是/否，离子就必须脱散。信息会不断地把离子从刀刃上打掉，使之落到一边。如果想要再传输一比特信息，你就得再来一个离子。有了一系列离子，你就能传输一连串其中编码着文本的比特；如果离子列足够长，你就可以发送图像、声音甚至视频。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;译自 Ted Chiang 的 Anxiety is The Dizziness of Freedom。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>【译】诗篇第46篇的秘密</title>
    <link href="http://neo42.github.io/2019/06/20/secret/"/>
    <id>http://neo42.github.io/2019/06/20/secret/</id>
    <published>2019-06-19T16:00:00.000Z</published>
    <updated>2019-12-26T14:33:01.582Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>译自 Brian Moriarty 于 2002 年 3 月 23 日在加州圣何塞游戏开发者大会进行的演讲<br><a href="http://ludix.com/moriarty/psalm46.html" target="_blank" rel="noopener">The Secret of Psalm 46</a></p></blockquote><a id="more"></a><blockquote><p>《圣经》诗篇第四十六篇</p><p>神是我们的避难所，是我们的力量，是我们在患难中随时的帮助。<br>所以，地虽改变，山虽摇动到海心，<br>其中的水虽砰訇翻腾，山虽因海涨而战抖，我们也不害怕。<br>有一道河，这河的分汊使神的城欢喜；这城就是至高者居住的圣所。<br>神在其中，城必不动摇；到天一亮，神必帮助这城。<br>外邦喧嚷，列国动摇；神发声，地便熔化。<br>万军之耶和华与我们同在；雅各的神是我们的避难所<br>你们来看耶和华的作为，看祂使地怎样荒凉。<br>祂止息刀兵，直到地极；祂折弓、断枪，把战车焚烧在火中。<br>你们要休息，要知道我是神！我必在外邦中被尊崇，在遍地上也被尊崇。<br>万军之耶和华与我们同在；雅各的神是我们的避难所！</p></blockquote><p><strong>在座的诸位有多少人亲眼目睹过日全食？</strong></p><p>有朝一日能站在月亮的影子里是我这辈子一个小小的目标。我和日全食距离最近的那次可是三十多年前的事儿了。那是 1979 年 2 月 26 号，一次日全食正好掠过波特兰市上空。我给自己买了大巴车票，还找了个住处，但最终还是没能扔下工作挤出时间去看。其实随便一个住在波特兰的人都会告诉你要想在二月见到太阳，希望有多渺茫。那天的城市上空自然也是阴云密布。我要是真去了也看不到什么东西。</p><p><img src="https://pic.superbed.cn/item/5d53ff5c451253d1787eb4d3.png" alt="波特兰市"><em>波特兰市</em></p><p>当时让我没办法脱身的差事是我大学毕业后的第一份工作：在美丽的麻省伍斯特市中心的一家 Radio Shack 老店里当售货员。就在我上班的第一天，一辆送货卡车停在了店门口。他们搬进来一个大纸箱，上面印着传说中的 TRS-80。那可是要被我们放在店里当样品展示的世界上第一款面向大众市场的微型计算机。TRS-80 I 代机型配有一个时钟速度 1.7 兆赫的 Z80 处理器，4,096 字节的内存和一个 64 位的黑白文本显示器，存储器只有一个盒式磁带。只需要付 599 美元——真是超级便宜的价格——所有这些就是你的了。</p><p><img src="https://pic.superbed.cn/item/5d53ff77451253d1787eb8c3.png" alt="Tandy/RadioShack TRS-80 I 代"><em>Tandy/RadioShack TRS-80 I 代</em></p><p>其实当时我干着的这家店的生意已经不行了。它坐落的位置曾经是欣欣向荣的商业区中心。但是，正如众多的新英格兰城市一样，到了 70 年代初，大型购物中心的兴起使得这里成了一片鬼城。但是伍斯特市在解决这个问题时还算坚决。城市的决策者们的决定当然是——如果他们干不过那些购物中心，那就干脆加入他们。于是市中心的几个方形街区都被推土机推平，湮灭作了尘土，几十个家族生意毁于一旦，其中就包括我的曾祖父操持过的一家药房。后来，一座巨大的三层购物综合体在那些店面倒塌之处拔地而起，里面还带有几家电影院和一个美食广场。工程竣工之后，就只剩下几个凄惨的伍斯特老街区还依然健在。我们那家 Radio Shack 店就坐落在其中的一个街区。但这之后，令我们雪上加霜的是，距离我们店不足 500 英尺的地方又开了一家崭新的 Radio Shack。那么现在顾客们就有的选了，是去那家既干净又敞亮、保安穿制服、停车场好几亩的店，还是来成人影院边上一栋破旧办公楼里这个不见天日的旮旯。于是，我有了大把时间来捯饬那台新型计算机。</p><p><img src="https://pic.superbed.cn/item/5d53ff50451253d1787eb2be.png" alt="伍斯特中心广场"><br><img src="https://pic.superbed.cn/item/5d53ff6e451253d1787eb6fd.jpg" alt="地图"><em>伍斯特中心广场及其地图</em></p><p>我自学了 BASIC 编程，之后又学了 Z80 汇编语言。当然两样都要学，这样我就可以写游戏了。我还做了几个自动运行的动画小样。它们在商店橱窗里整夜整夜地运行，供那些在我们门口撒尿的酒鬼们欣赏。倒也奇怪，就算内存都升级成 16K 了，我们寥寥无几的顾客貌似还是对店里的新型计算机没啥兴趣。其实大部分来店里的人都不是来买东西的。他们来这儿是为了蹭一种免费的促销活动，也就是 Radio Shack 员工 40 多年以来的噩梦，每月电池俱乐部。</p><p>促销的点子很简单。顾客们会领到一张红色卡片，每个月都可以在上面印一个方块标记。一年一共能印十二次。我们几个售货员谁点儿正谁就得给顾客打方块标记，之后送给顾客一节崭新的电池，要么是 3A 型，要么 2A，或者 C 型，或者 D 型，或者是 9 伏的。当然，顾客们不能随意选择电池种类。我上班那会儿，Radio Shack 正出售着三种性能卓越的电池。第一种是碱性电池，电力强劲持久，不便宜，用金色压花泡罩包装，像处方药似的挂在柜台后面。这种电池最不可能被拿到每月电池俱乐部送人。接下来是高端铅蓄电池，坚实可靠，价格适中，被放在店面前台突出展示。这些也不能送给每月电池俱乐部。最后“压箱底儿”的是标准铅蓄电池。这些电池是真的被我们精明地藏在店铺的紧后面，堆在一个放在电视天线旁阴暗角落的桶子底部。还记得电视天线长什么样吗？那么，要想领到每月的免费电池，顾客们就必须穿过 CB 无线电、立体声耳机和遥控赛车所有那些售货区，走上整个店面的距离。</p><p><strong>没啥挡得住他们。</strong></p><p>每个月的第一天，那些老主顾们就会像上了发条一样准时走进来，手里挥舞着他们那小小的红色卡片。而我就得把目光从面前的代码上移开、上扬，招呼他们到店铺后面。就算那些电池只值二十九美分也没关系，就算大部分电池都快报废了也没关系。他们来了就拿。而且据我回忆，他们没有一个人为此付过特么的一分钱。我这销售当得实在是太差劲了，当时就是个愣头青。之前我还以为我只有趴在键盘边上才能学到有关游戏设计的东西。差点儿我就错过了那些从店铺前门走进来的“学习材料”。</p><p>幸运的是，我并不是唯一一个在微机上捯饬游戏的人。在全国各地都有像我一样的人在做着一样的尝试。斯科特·亚当斯当时正在编写未来世界上第一款商业冒险游戏的代码。还记得冒险游戏长什么样吗？我未来的东家 Infocom 连同其他诸如在线系统（On-Line Systems）、天狼星（Sirius）、个人软件（Personal Software）和战略模拟（Strategic Simulations，SSI）等传奇般的公司当时正一个个成立。那真是个激动人心的时代。十几岁的小孩大把大把地赚着钞票，游戏都很便宜也很容易制作。游戏界的黑板也还只是一片空白，有待书写。</p><p><img src="https://pic.superbed.cn/item/5d53ff51451253d1787eb2e1.png" alt="斯科特亚当斯的 Adventureland（1979）"><br><em>斯科特亚当斯的 Adventureland（1979）</em></p><p>然而，1979 年有关游戏的最大新闻，其实跟计算机没有半点关系。</p><p>九月 20 日秋分这天一大早，大不列颠的书店里纷纷上架了一部新的儿童图书。不如说这部书挺稀奇的。书内有 15 幅精心绘制的彩色插画，讲的是一个兔子向月亮运送宝石的有点荒诞的故事。书的背面封面上是张彩色照片，上面是一枚货真价实的兔子形状的宝石，长五英寸，18K 黄金制成，周围还悬挂点缀着装饰品和铃铛，上面还镶着日月形状的两颗蓝色石英。据小道消息称，这枚宝石就埋在英格兰的某个地方。指向其位置的线索就隐藏在书中的文本和图片中。它将属于第一个找到它的人。</p><p><img src="https://pic.superbed.cn/item/5d540e48451253d1787f8d5a.jpg" alt="《假面舞会》封面"><br><img src="https://pic.superbed.cn/item/5d53ff4c451253d1787eb204.png" alt="《假面舞会》封面"><br><em>《假面舞会》封面</em></p><p>书的名字是《假面舞会》。作者是个双眼各朝一边的古怪小个男人，搞恶作剧很有天赋，名叫基特·威廉姆斯。第一版在短短几天内就售罄了。整个日不落帝国都被这股”兔子热”勾了魂儿。激动的读者们拿着尺子、指南针和量角器向着插画们发起进攻。杂志文章和电视特刊剖析线索、提出理论，随后则是对狂热分子们不羁的追寻感到由衷的欣慰。有座本来挺不起眼的公园，不幸绰号”兔子丘”，遂被前来挖洞的寻宝人直接挖成了筛子，致使当局不得不竖起标识，向公众保证那里绝对没有什么金兔子。一些”猎兔人”最后竟因为过度沉迷而不得不寻求心理咨询。</p><p><img src="https://pic.superbed.cn/item/5d53ff52451253d1787eb2fe.png" alt="基特·威廉姆斯"><em>基特·威廉姆斯</em></p><p>这股热潮席卷了大西洋，随后入侵美国、法国、意大利和德国。作品在数月之内售出了 100 万册，创下了哈利波特出现之前任何儿童图书作品都无可比肩的纪录。外文译本售出超过 15 万册，其中日文版就有 80000 册——尽管实际上书中的谜题只能用英语解开。就算假面舞会宝石价值只有几千美元也没关系。许多寻宝人在数月的探索和旅行中所费花销可远不止这个数。</p><p>关键是那种追寻某物的快感和成为”唯一之人”的可能性。寻宝、各种秘密信息和隐藏物品都像是散发着不可抗拒的魅力。寻找和谈论它们对人们来说很有意思。这个人类心理学事实从一开始就被运用到了电脑游戏里，并在我们称之为”彩蛋”的隐藏惊喜中得到了充分体现。而这都要归功于雅达利公司的斯蒂芬·莱特。他当年在《电子游戏杂志》的创刊号上创造了这个词。</p><p><img src="https://pic.superbed.cn/item/5d53ff58451253d1787eb3f5.png" alt="1981 年 10 月 29 日《电子游戏杂志》第一期"><em>1981 年 10 月 29 日《电子游戏杂志》第一期</em></p><p>第一个彩蛋出现在一款收录于一套老式雅达利 2600 卡带里的商业电脑游戏中。游戏的名字很简单，就叫《冒险》(Advanture)。玩家通过一系列难以想到的移动和隐蔽的操作，会发现一个秘密房间。房内”由 Warren Robinet 创造”的字样会出现在闪烁的字母中。几十年过去了，彩蛋和他邪恶的双胞胎——作弊码——已然成了一个行业中的行业。而所有杂志和网站如今都在精谋细划，致力于发现和传播它们。它们成了我们工具箱的一部分和游戏设计语言基本词汇的一部分。</p><p><img src="https://pic.superbed.cn/item/5d53ff4c451253d1787eb211.png" alt="Atari 2600"><em>Atari 2600</em></p><p><img src="https://pic.superbed.cn/item/5d53ff51451253d1787eb2e1.png" alt="Adventure (Atari 2600)"><em>Adventure (Atari 2600)</em></p><p>电脑游戏玩家可能是第一批用”彩蛋”指代隐藏惊喜的人，但我们一定不是第一批使用彩蛋的人。几个世纪以来，各门各类的画家、作曲家和艺术家们一直都在他们的作品中藏东藏西。最近 VCR 和能定格影像的光盘播放器的出现揭露了迪士尼几十年间秘密创作的色情作品。自封为”光之绘者”托马斯·金凯德把字母”N”藏在自己的作品中来自娱自乐。在他画作的签名旁会有一个数字写明每幅作品中一共藏有多少字母”N”。毕加索、达利、拉斐尔、普桑和其他几十位画家都在他们的画作中藏了各种各样的东西。他们最喜欢的一种手法是在画作中的人群背景里隐藏自己、家人朋友或艺术家伙伴的肖像。埃尔格列柯喜欢狗，但天主教会禁止他把狗画到神圣的壁画上。所以他把狗藏了起来——通常藏在空中云层的轮廓中。不满于苏联文化部政治审查制度压迫的作曲家迪米特里·肖斯塔科维奇在其交响乐和室内乐作品中隐藏了大量签名和反抗苏联政权的潜台词。如果当时就被人认出来，他可能会被因此流放到西伯利亚。莫扎特的歌剧《魔笛》的乐曲中充满了对共济会的隐喻——海顿和莫扎特师徒二人都是这个古老秘密社团的一员。</p><p><img src="https://pic.superbed.cn/item/5d53ff46451253d1787eb11a.png" alt="托马斯·金凯德《湖滨庄园》"><em>托马斯·金凯德《湖滨庄园》</em></p><p>然而最有名的兜售彩蛋的人是晚期巴洛克风格集大成者、终极音乐呆子——约翰·塞巴斯蒂安·巴赫。巴赫曾学过字母数字学——一种把数值赋给字母的技术：A=1，B=2，C=3 等等。人们可以通过对数字的比较、排列等操作在其中隐藏秘密信息。巴赫尤其喜欢用 14 和 41 这两个数玩字母数字。14 是他姓氏开头四个字母的值之和：B=2，A=1，C=3，H=8。41 是他全名开头字母的值之和：J S BACH。这两个数字在巴赫的作品中一次又一次的出现。比较著名的一例是他在合唱《Vor deinen Thron》（此处作者指的应该是《我走到你的宝座前（Vor deinen Thron tret’ ich）》）中的设定。旋律第一行共有不多不少 14 个音符，而整个旋律则从头到尾共有 41 个音符。</p><p><img src="https://pic.superbed.cn/item/5d53ff3a451253d1787eaf8a.png" alt="BACH 乐旨"><em>BACH 乐旨</em></p><p>巴赫爱玩的另一个游戏是谜语卡农。卡农是一种多声部交错重叠演奏时听起来很优美的旋律。《雅克弟兄》和《划船曲》就是两首我们耳熟能详的简单卡农。你可以在一首卡农中采用任意数量的声部，而且不需要把所有声部都用同一种方式演奏。你可以改变八度、转置声调、转位音高、倒着演奏或者采用其他任意的组合。寻找能构成优美多声部卡农的旋律可是一项费力而困难的艺术，巴赫则是这项艺术无可争议的大师。在一首谜语卡农中，作曲家一般只指定基本的旋律和声部的数量，而不规定声部之间的关系。解谜者则必须要找出每个声部的位置和声调，决定是否需要转位演奏或者（同时）倒着演奏。巴赫写了很多谜语卡农，其中最著名的《BMV 1076》可是一段迷人故事的一部分。</p><p>巴赫有个学生名叫洛伦兹·米兹勒，就是他创立了音乐科学学会。这个只能通过邀请进入的精英组织致力于研究毕达哥拉斯哲学以及音乐与数学之间的联系。协会杰出的成员们如同德国作曲家的名人堂，其中包括亨德尔，特勒曼以及莫扎特。申请入会的人需要提交一幅他们自己的油画像，还有一篇原创音乐小样。受呆子属性的驱使，我们的第 14 号会员（巴赫）决定把这些入会所需材料混合成一件作品。他坐着让德累斯顿法院的官方艺术家——伊莱亚斯奥斯曼画了张像。这幅肖像现在悬挂在莱比锡市政厅的画廊中。那是现存唯一一幅无可争议的巴赫的真实形象。奥斯曼画像上的巴赫身穿一件缀着正好 14 个扣子的正装外套，手里拿着一份乐谱，上面是一首六同步声部的谜语卡农。1974 年，一份手稿被人发现，证明了这首卡农是一系列以著名的戈德堡变奏曲乐旨为基础写成的 14 首卡农中的第 13 首。光在音乐上玩这些花样还不算完，巴赫还喜欢通过把音符赋给字母来在作品中藏匿信息。他姓的开头几个字母 BACH 在德文字母符号中分别对应音调序列中的 B#，A，C 和 B♮。这个乐旨在他最后一作《赋格的艺术》的最后几个小节中有着令人难忘的亮相。这部作品在他去世后不久面世。“赋格”这个词来源于拉丁语“fuga”，意思是飞（也可以解释为奔跑追逐）。所以赋格的艺术就是飞的艺术，就是取一乐旨并与之追逐行进的艺术。巴赫写了几百支赋格曲，但没有一支能比得上这 14 首那样恢弘和崇高。系列中最后一支也是最复杂的一支赋格曲中，前两个部分旋律行进很正常。但紧接着就是 BACH 签名乐旨，之后整首赋格就此戛然而止，全无任何征兆或者结构上的调整。卡尔·菲利普·伊曼纽尔，巴赫的 20 个儿子之一，声称巴赫在写下那最后几个音符之后随即死去。这个故事也许是杜撰的。巴赫音乐中的彩蛋这个优美谜题为大多数巴洛克音乐的教授和学生们所熟知，然而 2002 年三月，这个谜在一个讲座上一经公布便成为整个音乐行业的热门话题。</p><p><img src="https://pic.superbed.cn/item/5d53ff47451253d1787eb16e.png" alt="巴赫像"><em>巴赫像</em></p><p><img src="https://pic.superbed.cn/item/5d53ff46451253d1787eb126.png" alt="Contrapunctus XIV 的末页"><em>Contrapunctus XIV 的末页</em></p><p>当月一张题为《Morimur》的当代演绎版压缩光盘接近登上古典音乐排行榜榜首。专辑中的表演者是希利亚德合唱团，联合演出的还有一位才华横溢但彼时仍鲜为人知的小提琴手，克里斯托弗·波本。《Morimur》的音乐是以巴赫的 D 小调帕蒂塔小提琴独奏的字母数字学分析为基础的。作者德国教授赫尔加·索恩在分析中把数字赋值成音符的长度，小节数和帕蒂塔中的德国字母符号。她声称借此发现了藏匿于音符中的关于几次礼拜式的完整文本。光盘将这些隐藏文字置于原创音乐之上呈现了出来。呈现的结果是如此怪异的忧郁、阴暗，却又令人难忘而大受欢迎。</p><p><img src="https://pic.superbed.cn/item/5d53ff43451253d1787eb0be.png" alt="《Morimur》封面"><em>《Morimur》封面</em></p><p>相当数量的乐评人都抨击了这张光盘。他们对索恩教授的分析并不买账，认为那只不过是数字命理学和精明营销的结合体。他们的保守也不是没有根据。数字命理学确实是个滑溜溜的坡道，以至于众多睿智的思想都顺着它滑向了深渊。</p><p>让我讲个挺有意思的旧事儿。</p><p>90 年代初，互联网依然方兴未艾，有个名叫 Prodigy 的论坛是众多流行的在线公告板系统之一。我在 Prodigy 上买了个账号，加了个兴趣小组，跟全国各地的伙伴成员们扯扯淡。一天，一个陌生人出现在我们的公告板上。我就马上明白，麻烦来了。这位名叫加里的老兄开始满口乱喷世界阴谋论、秘密社团和恶魔崇拜之类各种关于世界末日的胡言乱语。一开始我们还努力礼貌应答他的话。我们向他询问他是从哪里知道这些的，纠正他的历史学错误，从逻辑上反驳他的言论并且努力文明地劝导他。然而我们的关注非但并没有平息他的胡言乱语，反而使他变本加厉。他的阴谋论警告变得咄咄逼人，以至于近乎歇斯底里。他开始威胁与其持不同观点的人。如果我生造个说法，应该就是加里的话“全都变大写了”。但他最咄咄逼人的警告并不是对于同性恋、犹太人、洛克菲勒家族抑或光照派的。根据加里的论断，人类最大的敌人是圣诞老人。他还声称他有个能够拨开疑云、“证明”圣诞老人就是敌基督化身的秘密公式。我们被他勾起了好奇心，随即就撺掇他展示一下那个公式。这下我们正中了他下的套。早就应该知道他其实是来卖书的。</p><p><img src="https://pic.superbed.cn/item/5d53ff3c451253d1787eafbf.png" alt="Prodigy 登录页"><em>Prodigy 登录页</em></p><p>我当时竟然信了，还给他打了 15 美元过去。不到一周书就到了。一张不祥的华盛顿纪念碑照片上方印着书名：《666：最后的警告！》。加里在这部私人印刷的 494 页巨作中展示了一个简单公式，他声称这个公式是古代的苏美尔人推演出来的。公式中字母表的每个字母都被赋值成 6 的连续倍数：A=6， B=12，C=18，以此类推。我把圣诞老人的名字代入这个古老公式后求和得出了亵渎神灵的数字 666——圣经中的兽名数目！想象一下我当时脸上的沮丧吧！我到 Prodigy 上跟我们兴趣小组同样震惊的组员们报告说加里终究还是说对了。根据古代苏美尔人无懈可击的智慧，圣诞老人毋庸置疑就是敌基督。接着我又提出了几个代入加里的公式之后求和可得出 666 的名字，比如”圣雅各(Saint James)”、”纽约(New York)”、”新墨西哥(New Mexico)”。不一会儿公告板上全都是新发现的名字，像是”计算机(computer)”、”波士顿茶(Boston tea)”，还有最不吉利的”唱卡拉 OK(Sing Karaoke)”。</p><p><img src="https://pic.superbed.cn/item/5d53ff3c451253d1787eafd5.png" alt="《666：最后的警告！》封面"><em>《666：最后的警告！》封面</em></p><p>加里在这之后就放过了我们。我那 15 美元花的挺值。</p><p>不过加里可不是第一个把秘密编码跟圣经联系起来的人。人们已经在圣经里找了几百年的彩蛋了。有人说神秘的希伯来传统卡巴拉是对旧约的前五本书——《摩西五经》在字母数字学上的反思。计算机的发明使得数字命理学在圣经上的应用一日千里。最近，前华尔街日报记者迈克尔·德罗斯宁在 1998 年出版的一本书又引发了一连串对于圣经的搜查。他的这本《圣经密码》采用了一种跳跃式解码方法，也就是把每段文本中的第 n 个字符组合从而得到一条信息。德罗斯宁声称他通过对旧约中希伯来文本进行跳跃式解码发现了对第二次世界大战、大屠杀、广岛原子弹事件、伊扎克·拉宾（以色列前总理）遇刺、肯尼迪家族的两次遇刺、阿波罗登月、水门事件、俄克拉荷马爆炸事件、比尔克林顿选举、戴安娜王妃之死以及彗木相撞的预言。他还发现预言说洛杉矶会发生大地震、流星会撞上地球、核末日将会来临。所有这些都会在 90 年代结束之前发生。《圣经密码》在畅销书排行榜上待了好几个星期，于是引出了随后的几部续作和几十部其他人的模仿作。圣经当然是招来了一大帮妄想症患者。但对于真正的硬核彩蛋猎人来说，没有什么可以与寻求最终文学难题答案之人的天才创意、顽强的学者精神和坚韧不拔的品质相媲美。何况那是这样一个有剧毒的难题：有人为之一掷千金、弃职业生涯于不顾，健康智慧的学者为之走向甚至出离疯狂的边缘。</p><p><img src="https://pic.superbed.cn/item/5d53ff4d451253d1787eb237.png" alt="《圣经密码》封面"><em>《圣经密码》封面</em></p><p><strong>莎士比亚的作品是谁写的？</strong></p><p>论述莎士比亚作品作者问题的连篇累牍足以堆满一座大图书馆。实际上确实存在几座这样的图书馆。就算一整天的教程也没办法准确描述这个复杂古怪危险诱人的故事，更不要说将近一个小时的讲座了。不过为了你们当中不熟悉这个问题的人，我还是试试用几段话概括一下吧。</p><p>确凿无疑的莎士比亚生平和职业事迹用鸡尾酒方巾的背面就可以写完。我们知道一个名叫威廉·莎士比亚的男人于 1564 年出生在埃文河畔斯特拉特福德村或其周边，这些都是事实。我们知道他有个老婆还有至少三个孩子。我们知道他在斯特拉特福德添置了地产，跟他邻居打了几场官司，死于 1616 年，享年 52 岁。我们也知道同时代的一个姓氏跟莎士比亚差不多的男人在伦敦的剧院舞台上当演员，最后成了那里几家剧院的合伙人。我们还知道，几乎与此同时，有些非凡的诗歌和戏剧在伦敦出版，作者署名为莎士比亚。但我们不知道斯特拉福德的地主和伦敦那个姓氏差不多的演员是否就是同一个人。我们不知道两个人是不是跟那些诗歌和戏剧有关系。我们唯独知道那些诗文和剧作自其出版的这近四百年来日渐被奉为西方文化的巅峰。</p><p><img src="https://pic.superbed.cn/item/5d53ff54451253d1787eb35d.png" alt="莎士比亚像"><em>莎士比亚像</em></p><p>莎士比亚的作品就好像是一个对一切事物都有所了解的人写出来的。他的作品中充满了对各种事物的引用，领域涉及神话和经典文学、游戏和运动、战争和武器、船只和航海，法律和法律术语、法庭礼仪、政治家技巧、园艺、音乐、天文、医药、鹰猎，当然还有戏剧。</p><p>那么问题来了。</p><p><img src="https://pic.superbed.cn/item/5d540693451253d1787f1e37.jpg" alt="埃文河畔"><em>埃文河畔</em></p><p>一个农民的儿子，学都不一定上过，出身于大多数人口都是文盲的农村，这样一个本该名不见经传的男人怎么可能以如此出众的口才和机智、如此渊博的智慧和理解能力来进行这种百科全书式的学习？在最初的 150 年里，没有人质疑传统上这位诗人的历史。其后，十八世纪后期，居住在斯特拉特福德以北几英里的杰出学者詹姆斯·威尔莫特牧师决定写一本这位著名剧作家的传记。牧师相信像莎士比亚这样受过良好教育的人一定有个很大的图书馆——尽管他的遗嘱中没有提到过一本书或手稿。他推测多年来其中的一些书籍一定已经被当地人收藏起来了。于是，勤勉的牧师搜罗了不列颠的乡村，并对斯特拉特福德 50 英里范围内的每一个书架都进行了盘点。结果莎士比亚图书馆里的书一本也没找到。关于莎士比亚的信件——无论是他写的还是寄给他的或者是关于他的——也连一封也没找到。此外，莎士比亚的任何一部作品都没有提到过斯特拉特福德地区的民间传说，当地谚语或独特方言。经过四年的艰苦研究，威尔莫特牧师沮丧地总结道，在斯特拉特福德的莎士比亚的时代，只有一人能展现出作成这些诗歌和戏剧所需的广博学识和表达才能。那人就是掌握多种语言的作家、哲学家和政治家，科学方法的发明者，伊丽莎白女王和詹姆斯国王法庭的大法官，弗朗西斯·培根爵士。威尔莫特牧师一直没敢公开他的理论。 但在他去世之前，他向朋友詹姆斯·考威尔透露了这一信息，后者在 1805 年将其搬上了伊普斯威奇哲学学会的一次会议。 学会会员大为光火，随后这一“诽谤”言论很快被世人遗忘。</p><p><img src="https://pic.superbed.cn/item/5d540607451253d1787f1739.jpg" alt="据传莎士比亚的出生地"><em>据传莎士比亚的出生地</em></p><p>后来，1857 年，一位来自斯特拉特福德——是美国康涅狄格州那个斯特拉特福德——的女士出版了一本名叫《莎士比亚戏剧哲学解读》的书。在这本书中， 迪利娅·培根小姐——跟弗朗西斯没有亲戚关系——声称莎士比亚的作品是由一个英国贵族秘密集团写就的，集团成员包括沃尔特·罗利爵士和菲利普·西德尼爵士以及弗朗西斯·培根爵士。迪利娅·培根的书瞬间震惊了文学界。正统的斯特拉特福德说支持者和异端的培根说支持者就此开战。为了论证各自的学说，一个个文学社团接连成立、一份份学术期刊陆续出版。数以百计的小册子、报纸文章和散文为着各方的观点而辩护，并各自凭仗着终身学者所特有的那种自大的恶意嘲笑着反对派。</p><p><img src="https://pic.superbed.cn/item/5d5408d3451253d1787f3eba.jpg" alt="《莎士比亚戏剧哲学解读》封面"><em>《莎士比亚戏剧哲学解读》封面</em></p><p>迪莉娅·培根揣着她的爆炸性大作去了埃文河畔的斯特拉特福德，竟然不可思议地获得了开启莎士比亚坟墓的官方许可。然而，等到了真的要她抬起石头的那一刻，迪莉娅的自我怀疑给她带来了灾难性的精神崩溃。她后来在疯人院死去，死的时候身无分文。</p><p>大约到了 1888 年，事情开始变得有些失控了。<br><img src="https://pic.superbed.cn/item/5d540a91451253d1787f551e.jpg" alt="《第一对开本》"><em>《第一对开本》</em></p><p>明尼苏达州的美国国会议员伊格内修斯·唐纳利对关于莎士比亚的争论产生了兴趣。 一天，他在翻阅传真版本的 1623 年出版的《第一对开本》时发现历史剧部分的第五十三页和喜剧部分的第五十三页都有“培根（bacon）”这个词。他还注意到弗朗西斯·培根爵士曾就密码学这一主题撰写了大量文章。于是，唐纳利开始数一行行地数、一页页地数，增删字母、在句子上画线、把单词圈出来又划掉。结果得到一个复杂到让人几乎无法理解的算法。他声称这是培根为了在《第一对开本》里藏匿秘密信息而发明的。西方文明史上最伟大的彩蛋狩猎行动开始了。</p><p>下面列举一些愚蠢的精彩瞬间。</p><p>底特律一个名叫奥威尔·欧文的医生搭建了一个古怪的研究工具，他称其为“命运之轮”。这个轮子由两个巨大的木制线轴组成，外面包裹着两英尺宽，一千英尺长的帆布。在这面帆布上，他粘贴了培根、莎士比亚、马洛、格林、皮勒和斯宾塞的全部作品，还有伯顿的《忧郁的解剖》。通过来回拉动线轴，欧文博士就可以快速拉开书页来寻找线索并进行交叉引用。欧文雇用了一大批秘书和速记员，还说自己已经发现了另外一套完整伊丽莎白时代的英国历史，以及几部全新的莎士比亚戏剧和十四行诗。听下看这个隐藏的诗句吧，据说是由伟大的莎士比亚本人所写，就是这个启发了欧文博士建造了他的命运之轮。</p><blockquote><p>拿起你的刀，砍下我们所有的书<br>然后将树叶放在一个坚固的大轮子上滚动<br>然后转动变幻无常的滚轮<br>把你的目光投向命运<br>那盲眼的女神，她站在一块球形的石头上<br>石头转动不定， 在不安分的变化滚动。</p></blockquote><p>发布了一共五卷的这种垃圾之后，欧文宣布发现了一个字谜。字谜表明培根的原始手稿被埋在怀伊河上的切普斯托城堡附近。欧文在接下来的十五年里花了数千美元雇佣船员、用高爆炸药轰炸河床。到他死的时候也什么都没找到。</p><p>还有一个名叫阿伦斯伯格的人基于对培根母亲墓中可疑裂缝重要性的分析写了整整一本书。</p><p>1957 年，一丝理智终于重现人间。</p><p>对于那些熟悉密码学的人来说，威廉弗里德曼这个名字几乎不需要介绍。在第二次世界大战期间，弗里德曼上校是美国陆军密码分析局的负责人。他因破解了日本帝国最难解的密码而广受赞誉。战争结束后，上校决定将他的专业知识运用到莎士比亚密码的研究中。 他采访了该领域的几位专家，并进行了详细的科学分析，并以《莎士比亚密码考》为题发表。</p><p><img src="https://pic.superbed.cn/item/5d540baf451253d1787f656f.jpg" alt="《莎士比亚密码考》"><em>《莎士比亚密码考》</em></p><p>他的结论是啥？俩字儿：扯淡。</p><p>根据密码学的标准，民间发现的莎士比亚作品中的隐藏信息全都不合理。他们提取文本信息采用的规则都是不严谨的、极其主观的，并且除了最初的解码者本人之外，任何人都没办法把原本的解码过程照做出来。当事人并非不诚实，只是他们当时被先入之见占领了大脑。他们受困于迷宫中，还试图从混乱中挖掘出秩序。</p><p><strong>“黑暗之湖旁的垂钓之人。”——《李尔王》第三幕，场景 6</strong></p><p>你以为弗里德曼冷酷无情的曝光足以让执异见者彻底沉默？没门儿。各种书籍、电视特别节目、网站、会议以及博士论文依旧前赴后继、纷至沓来。</p><p>我得说明莎士比亚作品的作者问题可不仅是考据癖们和怪人们的要紧事儿。许许多多备受尊崇的作家和莎学家都对这些戏剧作者方面的传统学说表示严重怀疑。名单上的人包括纳撒尼尔·霍桑、拉尔夫·沃尔多·爱默生、沃尔特·惠特曼，亨利·詹姆斯、山姆·克莱门斯、西格蒙德·弗洛伊德以及约翰·吉尔古德爵士。在世的怀疑论者包括新环球剧院的艺术总监马克·莱伦斯、迈克尔·约克、德里克·雅各比、肯尼斯·布拉纳，甚至还有当今最受尊敬的莎士比亚学者、演员，基努·里维斯。目前作者的主要候选人是牛津大学第十七届伯爵爱德华·德·维尔，这是英国一位不幸名叫约翰·托马斯·鲁尼的校长于 1920 年首次提出的理论。</p><p>究竟是什么让巴赫、圣经和莎士比亚的作品引发了如此如火如荼的研究？可没人去乔叟或者济慈的作品里找藏头诗。瓦格纳、贝多芬可没有秘密合唱团、热门唱片。为了回答这个问题，我们必须认识到圣经和莎士比亚在西方文化发展中所扮演的独特角色。没有文学作品比詹姆斯一世主持翻译、1611 年出版的圣经对现代英语影响更甚。詹姆斯王圣经用实例诠释了经典的含义。它被称为英国散文最高贵的丰碑，是英式语言最伟大的成就。它为几代诗人，戏剧家，音乐家，政治家和演说家提供了灵感。无数人通过重复书中的短语学会了阅读——这可是他们家里仅有的一本书。其节奏和意象深刻地塑造了我们的宪法和法律。但即便是十四位编辑组成的委员会笔耕十年写成的詹姆斯王圣经，它的荣光在埃文河天鹅令人眩目的遗作面前也黯然失色。在莎士比亚作品中，人们至今仍在使用的词汇最少有大约 15,000 词。这是詹姆斯王版圣经的三倍多，这是最接近他的约翰·弥尔顿的两倍。他的诗歌和戏剧是在没有字典或词库帮助的情况下编写的。它们当时还不存在，都在他脑海里。莎士比亚想到了一个点子，但伊丽莎白时代英语没有对应的词汇，他就自创一个。牛津词典罗列着的成百上千个日常单词和短语都在诗人的篇章中上演过处子秀。</p><blockquote><p>Addiction. Alligator. Assassination. Bedroom. Critic. Dawn. Design. Dialogue. Employer. Film. Glow. Gloomy. Gossip. Hint. Hurry. Investment. Lonely. Luggage. Manager. Switch. Torture. Transcendence. Wormhole. Zany.</p></blockquote><p>仅《哈姆雷特》一部作品就包含了近四十个这种新词。试问今天还有谁有如此胆量、如此疯狂的发明冲动？</p><p>其他的英语作者中只有一位在创造新词方面接近了莎士比亚的水准：弗朗西斯·培根爵士。现代的纪录保持者是查尔斯·道奇森，更有名的是刘易斯·卡罗尔，有趣的是，他恰好也是继莎士比亚之后英国第二大被引用作者。</p><p>詹姆斯王圣经和莎士比亚的影响深刻地影响了每个人。无论喜欢这些作品与否，我们所有人都正在借着这些伟大作品的透镜观察着这个世界。它们是现代英语思想最主要的来源文本，是我们思维的风格指南。当你注视着这些光彩夺目的智慧和辞藻之瑰宝的时候，一种奇特的感觉会油然而生。那是一种霸道有力但稀有珍贵却又有可能彻底搅乱你的生活的情绪，一种足以让一个男人抛妻弃子、扔下饭碗和名声，乃至散尽家财也要毫不迟疑地追随自己内心的强大力量。</p><p>那种好奇和恐惧的完美融合，那种令人无法抗拒的吸引力和令灵魂麻木的恐惧。我们称之为敬畏。敬畏是艺术成就的圣杯。再没有其他人类情感拥有如此原始的变革力量，也再没有一种人类情感比它更难以唤醒。有资格真正令人敬畏的作品实在少之又少。正是敬畏，感召着一位拉比穷其一生都要从摩西五经中解密耶和华的旨意。正是敬畏，召唤着每年数百万的游客前往吉萨金字塔、瓜达卢佩和麦加。正是敬畏，将可怜的迪莉娅·培根推向了她的厄运。</p><p>不过，请不要带着”令人敬畏的游戏设计的关键就是设置彩蛋”这个想法离开这个讲座。平庸的游戏和其中做作的彩蛋和作弊码就像月度俱乐部的电池。你必须辛苦跋涉到商店的后面才能得偿所愿。如果超能力就是人们真正想要的，为什么不直接给他们呢？难道我们的想象力就如此贫乏，以至于非得诉诸营销噱头才能让玩家对我们的游戏感兴趣吗？</p><blockquote><p>令人敬畏的事物不会有丝毫保留。<br>令人敬畏的事物丰盛而慷慨。<br>宝藏就守候在那里。</p></blockquote><p>一天下午，我独自一人坐在那个 Radio Shack 老店的柜台后面。我老板出于某种原因离开了。一位老妇人走过前门。像大多数顾客一样，她衣着整洁，应该是有固定收入的。我以为她是来领免费电池的。然而并不是，她把一台便携式收音机放到柜台上。这台收音机来自那个晶体管数量还备受标榜的年代，整个被脏兮兮的白色医用胶带包裹着。那老太太看着我，问：“你能修好吗？”我慢慢打开医用胶带，一层层剥开，直到收音机的后盖脱落，一团红色烟尘随之飘散开来。收音机内部已经被电池漏液腐蚀掉了一半。我看了看收音机，看了看老太太，又看了看收音机，伸手去拿我身后像处方药一样挂着的昂贵碱性电池，从金色泡罩包装中取出了一节闪亮的 9 伏电池，接着从一个盒子里拿出一个全新的晶体管收音机，装上碱性电池并帮这位女士找到了她最喜欢的电台。中间没有一分金钱易手。她走出了商店，一言不发。令人敬畏之事大概就像那样吧。</p><p>巴赫向学生们具体地展示了他对于敬畏之源的洞见。除了 B-A-C-H 之外，还有两组字母与 Bach 的音乐有关。这些字母没有被隐藏在笔记中。相反，它们被潦草地写在他的手稿顶部，让全世界都能看到。这些字母就是 SDG 和 JJ。SDG 代表拉丁语 Soli Deo Gloria，“仅为上帝的荣耀”。JJ 代表 Jesu Juva，“助我，耶稣。”巴赫“以永恒的形式（sub specie aeternitatis）”写就了他所有伟大的作品。他作曲不仅仅是为了取悦金主或是赢得听众们的赞许。他的作品就是他的礼拜。巴赫曾写道：“音乐的最终目的除荣耀上帝和再造灵魂之外不应再有其他。如果不记住这一点，就不可能作出真正的音乐，只会写出地狱般的喧嚣和咆哮。”一股力量如果能够打动你，那么它的名字并不重要。重要的是你真的被打动了。敬畏是宗教的基础。再没有其他的激励力量能让你摆脱个人成就的限制。再没有其他事物能教会你飞的艺术。电脑游戏至今也就仅仅才四十岁。我们的基本词汇表里也才刚刚写了几个单词。有一整部字典正等着我们去编写。黑板仍只是一片空白，有待书写。</p><blockquote><p>不久之后的一天<br>也许就在我们有生之年<br>将会有一个游戏设计会像闪电一样划过并照亮我们整个文化<br>它将会很好辨识<br>它将会是慷慨的<br>它将会陆离眩目，同时充满旺盛的创造力<br>学者们会花上几十年，或许几个世纪<br>来对它条分缕析<br>它将会令人惊叹<br>令人恐惧<br>令人充满敬畏</p></blockquote><p><img src="https://pic.superbed.cn/item/5d540cb2451253d1787f75db.jpg" alt="圣三一教堂 (埃文河畔斯特拉特福)"><em>圣三一教堂 (埃文河畔斯特拉特福)</em></p><p>几年前，我受邀去伦敦的一个会议上演讲，我妻子跟我一起去的。我们给自己放了一天假，出去看看风景。我们决定去参观英格兰第二大旅游景点——埃文河畔的斯特拉特福德。我们的火车到站的时候，天气很冷，还下着雨。幸运的是，大多数景点距离火车站仅几步之遥。我们参观了莎士比亚的出生地。这是一座坐落在主街道旁的迷人老房子，每年都吸引着数百万拜谒者——尽管没有任何证据能证明莎士比亚曾经生活在那里。我们还是路过了莎士比亚学习读写时所在的学校——尽管没有现存文件能够证明他在那里上过课。我们参观了安妮·海瑟薇的小屋，这是莎翁妻子小时候待过的乡村农场——尽管没有任何记录显示曾有叫安妮海瑟薇这个名字的人住过那里。最后，我们来到一个地方，这里与莎士比亚有无可否认的联系：位于埃文河畔的圣三一教区教堂。那里埋葬着一个与莎士比亚同名的男人。这座美丽的教堂毗邻一条长长的步道。步道穿过一排排古老的墓碑，掩映在高大的树木之下。入口门出奇的小，进了门不允许拍照。室内幽暗静谧，尽管有几大巴车的游客在场，场面气氛仍静中有敬。有几人正坐在长凳上深切地祈祷着。一条过道通向教堂的中心。祭坛的左侧被灯光照得亮堂堂的，上方墙壁上是一尊著名的诗人半身像。他手持羽毛笔，平静地凝视着前来拜谒的人群。下方的地面上——这里正是迪莉娅·培根失去理智的地方——威廉莎士比亚的墓碑静静躺在花束丛中，上面写着这些可怕的警告：</p><blockquote><p>挚友，<br>念耶稣之名，且把情留;<br>莫掘此处内藏之尘朽。<br>保此石墓者必蒙天佑，<br>盗我尸骨者必受咒诅。</p></blockquote><p>每年有三百万朝圣者从地球上的每个国度来到这个石碑面前，瞻仰这个作品只能用“令人敬畏”来形容的男人的遗容。相比之下，祭坛右侧则是一片黑暗，平淡无奇。没有哪部作品的作者被安葬在这里。唯一有意思的东西是一个木箱子，设计简洁，用深色橡木雕刻而成。箱子里用厚厚的玻璃密封着一本巨大的、打开着的书。箱子上的铭牌表明这本书是 1611 年出版的初版詹姆斯王圣经。那年，莎士比亚 46 岁。没有多少拜谒者过来参观祭坛的这一侧。过来的人大多数也只是简单瞟一眼书，看看铭牌然后继续前进。几个眼力不错的人可以注意到，圣经恰好被打开翻到旧约中的其中一页：诗篇，第 46 篇。为什么会特意选择这一页？没有解释。</p><p>我先把话说在前头：其实我们根本没必要解释各中原因。所以如果你只是受了好奇的趋使，如果你对英国的历史和文学很感兴趣，如果你很珍惜你内心的宁静，现在捂紧你的耳朵，快！</p><p>1900 年，一位学者注意到詹姆斯王译本圣经的诗篇第 46 篇中另有玄机，令人恐惧、惊叹的玄机。诗篇第 46 篇开头的第 46 个单词是“shake”，从末尾数第 46 个单词是“spear”。这里只有两种可能性。要么，这是世界文学史上有史以来最精彩的巧合。要么，事情并没有这么简单。</p><p>地球只围绕一个太阳旋转，也就只有一个月亮。月亮恰好比太阳小四百倍。地日距离恰好也比地月距离远了四百倍。地球的天空中月球和太阳的明显轨迹每个月恰好相交两次。也就是说，每过一段时间，每经过一段漫长但仍可以被准确预测的时间，月球将会划过太阳朝着地球的这一面，并在令人恐惧而惊叹的几分钟内刚好把它遮住。美妙的巧合，不是吗？</p><p>1977 年 6 月，一个双眼各朝一边、有恶作剧天赋的小个子男人登上了英国安特希尔村的山顶。这个山顶上竖立着一个高大纤细的十字架，借以纪念亨利八世的第一任妻子——阿拉贡的凯瑟琳。南边天空中高悬的太阳将十字架的阴影投射在山坡的草地上。中午 12 点整，男人从口袋里取出一块磁铁。他转动磁铁使其北极向南，并将其埋在十字架的阴影下。两年后，距离这个人第一本书的出版还有几个小时，他又回到了那个山坡，不过这次是在深夜。他用指南针找到了当时埋藏的磁铁。就在同一个地方，他在地上挖了一个洞，接着放了一个陶瓷容器进去，容器上刻着下面的字：</p><blockquote><p>我是假面舞会珠宝的守护者，它正躺在我的身体里，等待着你——抑或永恒。</p></blockquote><p><img src="https://pic.superbed.cn/item/5d540ecf451253d1787f974d.jpg" alt="假面舞会宝藏"><em>假面舞会宝藏</em></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;译自 Brian Moriarty 于 2002 年 3 月 23 日在加州圣何塞游戏开发者大会进行的演讲&lt;br&gt;&lt;a href=&quot;http://ludix.com/moriarty/psalm46.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;The Secret of Psalm 46&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>统计学基础简略梳理</title>
    <link href="http://neo42.github.io/2019/05/12/2019-5-12-statistics-1/"/>
    <id>http://neo42.github.io/2019/05/12/2019-5-12-statistics-1/</id>
    <published>2019-05-12T14:57:00.000Z</published>
    <updated>2019-09-24T16:59:40.109Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://www.khanacademy.org/math/ap-statistics" target="_blank" rel="noopener">Khan Academy AP®︎ Statistics</a> 的听课笔记。佛系解释，日后再改。</p></blockquote><a id="more"></a><p>假设要测量全国 N 人口身高，从中随机抽取 n 人</p><h2 id="总体-Population"><a href="#总体-Population" class="headerlink" title="总体 Population"></a>总体 Population</h2><p>全国 N 人</p><h2 id="样本-Sample"><a href="#样本-Sample" class="headerlink" title="样本 Sample"></a>样本 Sample</h2><script type="math/tex; mode=display">x_i</script><p>随机抽取的 n 人</p><script type="math/tex; mode=display">x_1,x_2,...,x_{n}</script><h2 id="总体均值-Population-Mean"><a href="#总体均值-Population-Mean" class="headerlink" title="总体均值 Population Mean"></a>总体均值 Population Mean</h2><p>全国 N 人的平均身高</p><script type="math/tex; mode=display">\mu=\dfrac{x_1+x_2+x_3+...+x_N}{N}=\dfrac{\sum_{i=1}^{N} x_i}{N}</script><h2 id="样本均值-Sample-Mean"><a href="#样本均值-Sample-Mean" class="headerlink" title="样本均值 Sample Mean"></a>样本均值 Sample Mean</h2><p>被抽取的 n 人的平均身高，n 人身高之和除以 n</p><script type="math/tex; mode=display">\overline{x}=\dfrac{x_1+x_2+x_3+...+x_n}{n}=\dfrac{\sum_{i=1}^{n} x_i}{n}</script><h2 id="（总体）方差-Population-Variance"><a href="#（总体）方差-Population-Variance" class="headerlink" title="（总体）方差 (Population) Variance"></a>（总体）方差 (Population) Variance</h2><p>反映<a href="#总体-population">总体</a>中各个数据与<a href="#总体均值-population-mean-mu">总体均值</a>的距离和数据的集中趋势，是为了方便描述数据特征而构造的的人造结构</p><script type="math/tex; mode=display">\sigma^2=\dfrac{(x_1-\mu)^2+(x_2-\mu)^2+(x_3-\mu)^2+...+(x_N-\mu)^2}{N}=\dfrac{\sum_{i=1}^{N}(x_i-\mu)^2}{N}</script><h2 id="推论统计学-Inferential-Statistics"><a href="#推论统计学-Inferential-Statistics" class="headerlink" title="推论统计学 Inferential Statistics"></a>推论统计学 Inferential Statistics</h2><p>根据对<a href="#样本-sample-x_i">样本</a>的描述推断<a href="#总体-population">总体</a>的情况</p><h2 id="样本方差-Sample-Variance"><a href="#样本方差-Sample-Variance" class="headerlink" title="样本方差 Sample Variance"></a>样本方差 Sample Variance</h2><p>与<a href="#总体方差-population-variance-sigma2">总体方差</a>同理，通常会小于总体方差</p><script type="math/tex; mode=display">S^2=\dfrac{(x_1-\overline{x})^2+(x_2-\overline{x})^2+(x_3-\overline{x})^2+...+(x_n-\overline{x})^2}{n}=\dfrac{\sum_{i=1}^{n}(x_i-\overline{x})^2}{n}</script><h2 id="总体方差的无偏估计-Unbiased-Estimate-of-The-Variance"><a href="#总体方差的无偏估计-Unbiased-Estimate-of-The-Variance" class="headerlink" title="总体方差的无偏估计 Unbiased Estimate of The Variance"></a>总体方差的无偏估计 Unbiased Estimate of The Variance</h2><p>一种更接近<a href="#总体方差-population-variance-sigma2">总体方差</a>的样本方差对总体方差的估计值</p><script type="math/tex; mode=display">S^2 =S_{n-1}^2=\dfrac{(x_1-\overline{x})^2+(x_2-\overline{x})^2+(x_3-\overline{x})^2+...+(x_n-\overline{x})^2}{n-1}=\dfrac{\sum_{i=1}^{n}(x_i-\overline{x})^2}{n-1}</script><h2 id="标准差-Standard-Deviation-sigma"><a href="#标准差-Standard-Deviation-sigma" class="headerlink" title="标准差 Standard Deviation $\sigma$"></a>标准差 Standard Deviation $\sigma$</h2><p><a href="#总体方差-population-variance-sigma2">方差</a>的平方根</p><script type="math/tex; mode=display">\sigma=\sqrt{\sigma^2}=\sqrt{\dfrac{\sum_{i=1}^{N}(x_i-\mu)^2}{N}}</script><h2 id="方差-sigma-2-公式的简化"><a href="#方差-sigma-2-公式的简化" class="headerlink" title="方差$\sigma^2$公式的简化"></a>方差$\sigma^2$公式的简化</h2><script type="math/tex; mode=display">\begin{align}\sigma^2 &= \dfrac{\sum_{i=1}^{N}(x_i-\mu)^2}{N}\\&= \dfrac{\sum_{i=1}^{N}(x_i^2-2x_i\mu+\mu^2)}{N}\\&= \dfrac{\sum_{i=1}^{N}x_i^2}{N}-2*\dfrac{\sum_{i=1}^{N}x_i}{N}*\mu+\dfrac{\sum_{i=1}^{N}\mu^2}{N}\\&= \dfrac{\sum_{i=1}^{N}x_i^2}{N}-2\mu^2+\mu^2\\&= \dfrac{\sum_{i=1}^{N}x_i^2}{N}-\mu^2\\&= \dfrac{\sum_{i=1}^{N}x_i^2}{N}-\dfrac{(\sum_{i=1}^{N}x_i)^2}{N^2}\\\end{align}</script><h2 id="随机过程-Random-Process"><a href="#随机过程-Random-Process" class="headerlink" title="随机过程 Random Process"></a>随机过程 Random Process</h2><p>简单理解：会发生一组随机事件的过程，例如抛硬币或者掷骰子</p><h2 id="输出值-Output"><a href="#输出值-Output" class="headerlink" title="输出值 Output"></a>输出值 Output</h2><p><a href="#随机过程-random-process">随机过程</a>中随机事件发生的结果，<a href="#随机变量-random-variable-x">随机变量</a>的取值</p><h2 id="随机变量-Random-Variable-X"><a href="#随机变量-Random-Variable-X" class="headerlink" title="随机变量 Random Variable $X$"></a>随机变量 Random Variable $X$</h2><p><a href="#随机过程-random-process">随机过程</a>中的随机事件结果集合，是用来量化随机过程的<strong>函数</strong>，从随机过程映射到数值</p><p>例如明天是否下雨</p><script type="math/tex; mode=display"> X=\begin{cases}  0, & \text{if it doesn't rain tomorrow}, \\  1, & \text{otherwise}.\end{cases}</script><p>或抛硬币哪面朝上</p><script type="math/tex; mode=display">X=\begin{cases}  0,&\text{if heads,}  \\  1,&\text{if tails.}\end{cases}</script><h2 id="离散型随机变量-Discrete-Random-Variable"><a href="#离散型随机变量-Discrete-Random-Variable" class="headerlink" title="离散型随机变量 Discrete Random Variable"></a>离散型随机变量 Discrete Random Variable</h2><p>数值个数有限、可以枚举、数值大小不连续</p><h2 id="连续型随机变量-Continuous-Random-Variable"><a href="#连续型随机变量-Continuous-Random-Variable" class="headerlink" title="连续型随机变量 Continuous Random Variable"></a>连续型随机变量 Continuous Random Variable</h2><p>无穷个数值、枚举无法覆盖全部情况、数值大小连续</p><h2 id="概率密度函数-Probability-Density-Function-f-x"><a href="#概率密度函数-Probability-Density-Function-f-x" class="headerlink" title="概率密度函数 Probability Density Function $f(x)$"></a>概率密度函数 Probability Density Function $f(x)$</h2><p>在数学中，<a href="#连续型随机变量-continuous-random-variable">连续型随机变量</a>的<a href="#概率密度函数-probability-density-function-fx">概率密度函数</a>是一个描述这个随机变量的输出值在某个确定的取值点附近的可能性的函数（不是概率大小，区别于<a href="#概率质量函数-probability-mass-function">概率质量函数</a>）。密度函数上单独的某一点表现的是概率质量函数在某一点的变化率。</p><p>图形示例</p><p><img src="/../density.png" alt="Image">{:.shadow}</p><p>构成过程：参考<a href="https://www.youtube.com/watch?v=flNS7ubhgTU" target="_blank" rel="noopener">YouTube</a></p><p><strong>概率大小和概率密度的关系</strong></p><ul><li>给定一个区间，则这个区间上概率密度函数的积分就是随机变量 X 落在这个区间内的概率</li></ul><script type="math/tex; mode=display">P(a \leq X \leq b)=\int_a^bf(X)d_x\\</script><ul><li>某点的 概率密度函数 即为 概率在该点的变化率(或导数).</li><li><a href="#随机过程-random-process">随机过程</a>中所有事件发生的概率之和（概率密度函数曲线下方的面积）为 1</li></ul><script type="math/tex; mode=display">\int_{-\infty}^\infty f(x)d_x=1</script><p>参考：<a href="https://www.zhihu.com/question/23237834" target="_blank" rel="noopener">知乎</a></p><h2 id="概率质量函数-Probability-Mass-Function"><a href="#概率质量函数-Probability-Mass-Function" class="headerlink" title="概率质量函数 Probability Mass Function"></a>概率质量函数 Probability Mass Function</h2><p><a href="#离散型随机变量-discrete-random-variable">离散随机变量</a>在各特定取值上的概率</p><p>概率质量函数和<a href="#概率密度函数-probability-density-function-fx">概率密度函数</a>不同之处在于：概率质量函数是对<a href="#离散型随机变量-discrete-random-variable">离散随机变量</a>定义的，本身代表该值的概率</p><h2 id="累积分布函数-Cumulative-Distribution-Function"><a href="#累积分布函数-Cumulative-Distribution-Function" class="headerlink" title="累积分布函数 Cumulative Distribution Function"></a>累积分布函数 Cumulative Distribution Function</h2><p>也叫概率分布函数、分布函数。是<a href="#概率密度函数-probability-density-function-fx">概率密度函数</a>的积分，概率函数取值的集合结果，表示离散变量中所有小于等于 a 的<a href="#输出值-output">输出值</a>出现概率的和</p><script type="math/tex; mode=display">{F_{X}(x)=\operatorname {P} (X\leq x)}</script><h2 id="期望值-Expected-Value-E-X"><a href="#期望值-Expected-Value-E-X" class="headerlink" title="期望值 Expected Value $E(X)$"></a>期望值 Expected Value $E(X)$</h2><p>总体均值、数学期望、或均值，亦简称期望</p><p><a href="#离散型随机变量-discrete-random-variable">离散性随机变量</a>的期望值是试验中每次可能的结果乘以其结果概率的总和</p><p>如果$X$是<a href="#离散型随机变量-discrete-random-variable">离散型随机变量</a>，输出值为 $x<em>{1},x</em>{2},\ldots$，和输出值相应的概率为 $p<em>{1},p</em>{2},\ldots$（概率和为 1）。</p><script type="math/tex; mode=display">{E} (X)=\sum _{i}p_{i}x_{i}</script><p>参考：<a href="https://zh.wikipedia.org/wiki/%E6%9C%9F%E6%9C%9B%E5%80%BC" target="_blank" rel="noopener">维基百科</a></p><h2 id="伯努利试验"><a href="#伯努利试验" class="headerlink" title="伯努利试验"></a>伯努利试验</h2><p>单次成功/失败试验又称为伯努利试验</p><h2 id="二项分布-Binomial-Distribution"><a href="#二项分布-Binomial-Distribution" class="headerlink" title="二项分布 Binomial Distribution"></a>二项分布 Binomial Distribution</h2><p>n 个独立的是/非试验中成功的次数的离散概率分布</p><h3 id="二项分布的概率"><a href="#二项分布的概率" class="headerlink" title="二项分布的概率"></a>二项分布的概率</h3><p>设进行 n 次<a href="#伯努利试验">伯努利试验</a>，结果为是的概率 P(是)=p，结果为非的概率 P(非)=1-p，结果为是次数为 k</p><p>结果为是次数为 k 的概率为</p><script type="math/tex; mode=display">  P(X=k)=  \Big(    \begin{split}    n \\    k    \end{split}  \Big)p^k(1-p)^{n-k};\Big(    \begin{split}    n \\    k    \end{split}  \Big)=\dfrac{N!}{k!(N-k)!}</script><p>n=1 时的二项分布称为伯努利分布</p><h3 id="二项分布的期望"><a href="#二项分布的期望" class="headerlink" title="二项分布的期望"></a>二项分布的期望</h3><p>设进行 n 次伯努利试验，结果为是的概率 P(是)=p，结果为否的概率 P(非)=1-p，结果为是次数为 k，$a = k-1,b = n-1,n-k = b-a$。总体<a href="#期望值-expected-value-ex">期望值</a>为</p><script type="math/tex; mode=display">\begin{align}E(X) &= \sum_{k=0}^nk\Big(     \begin{split}     n \\     k     \end{split}    \Big)p^k(1-p)^{n-k};\\    &= 0 + 1\Big(      \begin{split}        n\\        1      \end{split}      \Big)p^1(1-p)^{n-1} + ... +n\Big(      \begin{split}        n\\        n      \end{split}      \Big)p^n(1-p)^{n-n}\\    &= \sum_{k=1}^nk\Big(      \begin{split}        n\\        k      \end{split}      \Big)p^k(1-p)^{n-k}\\    &= \sum_{k=1}^nk\dfrac{n!}{k!(n-k)!}p^k(1-p)^{n-k}\\    &= \sum_{k=1}^nk\dfrac{n!}{k(k-1)!(n-k)!}p^k(1-p)^{n-k}\\    &= \sum_{k=1}^n\dfrac{n!}{(k-1)!(n-k)!}p^k(1-p)^{n-k}\\    &= \sum_{k=1}^n\dfrac{n(n-1)!}{(k-1)!(n-k)!}p*p^{k-1}(1-p)^{n-k}\\    &= np\sum_{k=1}^n\dfrac{(n-1)!}{(k-1)!(n-k)!}p^{k-1}(1-p)^{n-k}\\    &= np\sum_{a=0}^b\dfrac{b!}{a!(b-a)!}p^a(1-p)^{b-a}\\    &= np\sum_{a=0}^b\dfrac{b!}{a!(b-a)!}p^a(1-p)^{b-a}\\    &= np\sum_{a=0}^b\Big(      \begin{split}        b\\        a      \end{split}      \Big)p^a(1-p)^{b-a}\\    &= np    \end{align}</script><p>参考：<a href="https://zh.wikipedia.org/wiki/%E4%BA%8C%E9%A0%85%E5%88%86%E4%BD%88" target="_blank" rel="noopener">维基百科</a></p><h2 id="泊松分布-Poisson-Distribution"><a href="#泊松分布-Poisson-Distribution" class="headerlink" title="泊松分布 Poisson Distribution"></a>泊松分布 Poisson Distribution</h2><p>一种离散分布，二项分布的极限</p><p>适合描述单位时间内随机事件发生的次数的概率分布。例：一段时间内一个路口的车流量、餐馆的就餐人数、汽车站台的候客人数、机器出现的故障数。</p><h3 id="泊松分布的概率质量函数"><a href="#泊松分布的概率质量函数" class="headerlink" title="泊松分布的概率质量函数"></a>泊松分布的概率质量函数</h3><p>$\lambda={某一随机事件在一段时间内发生的平均次数 \over 这段时间的长度}$ ，或者理解为期望值</p><script type="math/tex; mode=display">P(X=k)=\frac{e^{-\lambda}\lambda^k}{k!}</script><h4 id="推导-二项分布角度"><a href="#推导-二项分布角度" class="headerlink" title="推导(二项分布角度)"></a>推导(二项分布角度)</h4><script type="math/tex; mode=display">e=\lim_{n\to\infty}\left(1+{1 \over n}\right)^n\\</script><p>设${1 \over n}={a \over x},x=na,E(X) = \lambda = np$</p><script type="math/tex; mode=display">\begin{align}\lim_{n\to\infty}\left(1+{1 \over n}\right)^{na}&= \lim_{n\to\infty}\left(\left(1+{1 \over n}\right)^n\right)^a\\&= \lim_{n\to\infty}\left(\left(1+{1 \over n}\right)^n\right)^a\\&= \left(\lim_{n\to\infty}\left(1+{1 \over n}\right)^n\right)^a\\&= e^a\\\end{align}</script><p>当 n 趋于无穷时</p><script type="math/tex; mode=display">\begin{align}  \lim_{n\to\infty} P(X=k)&=\lim_{n\to\infty}{n \choose k} p^k (1-p)^{n-k} \\ &=\lim_{n\to\infty}{n! \over (n-k)!k!} \left({\lambda \over n}\right)^k \left(1-{\lambda\over n}\right)^{n-k}\\ &=\lim_{n\to\infty}{\left[\frac{n!}{n^k\left(n-k\right)!}\right]}\left(\frac{\lambda^k}{k!}\right){\left(1-\frac{\lambda}{n}\right)^n}{\left(1-\frac{\lambda}{n}\right)^{-k}}\\ &=\lim_{n\to\infty}\underbrace{\left[\frac{n(n-1)(n-2)...(n-k+1)}{n^k}\right]}_{\to 1}\left(\frac{\lambda^k}{k!}\right)\underbrace{\left(1-\frac{\lambda}{n}\right)^n}_{\to e^{-\lambda}}\underbrace{\left(1-\frac{\lambda}{n}\right)^{-k}}_{\to 1}\\&= \left(\frac{\lambda^k}{k!}\right)e^{-\lambda}\\\end{align}</script><h2 id="大数定律-Law-of-Larger-Numbers"><a href="#大数定律-Law-of-Larger-Numbers" class="headerlink" title="大数定律 Law of Larger Numbers"></a>大数定律 Law of Larger Numbers</h2><p>在重复试验中，随着试验次数的增加，事件发生的频率趋于一个稳定值。样本数量越多，则其算术平均值就有越高的概率接近期望值。</p><h2 id="正态分布-Normal-Distribution"><a href="#正态分布-Normal-Distribution" class="headerlink" title="正态分布 Normal Distribution"></a>正态分布 Normal Distribution</h2><p>一种离散型分布，泊松分布的极限</p><p>若随机变量服从一个数学期望为$μ$、方差为$σ^2$的正态分布，记为$X∼N(μ，σ2)$。其概率密度函数为</p><script type="math/tex; mode=display">f(x)=\frac{1}{\sqrt{2\pi}\cdot\sigma}e^{-\frac{1}{2}\left(\frac{x-\mu}{\sigma}\right)^2}</script><ul><li>$\mu=0,\sigma=1$的正态分布是标准正态分布</li><li>使用正态分布近似代替二项分布时，必须进行连续性修正</li></ul><h2 id="Z-分数-Z-Score"><a href="#Z-分数-Z-Score" class="headerlink" title="Z 分数 Z-Score"></a>Z 分数 Z-Score</h2><p>表示给定值与平均值间距离多少个标准差</p><h2 id="经验法则-Empirical-Rule"><a href="#经验法则-Empirical-Rule" class="headerlink" title="经验法则 Empirical Rule"></a>经验法则 Empirical Rule</h2><p>又叫 3-sigma 法则或者 68-95-99.7 法则，用于对已知平均数和标准差的正态分布数据进行快速推算</p><p>在正态分布中，几乎所有数据都将落在均值的三倍标准差内。所述经验规则表明，68%的数据将分布在的第一个标准偏差之内，95%将落在第二个标准差之内，和 99.7%将落在均值的前三个标准偏差之内。</p><p>参考：<a href="https://baike.baidu.com/item/%E7%BB%8F%E9%AA%8C%E6%B3%95%E5%88%99%EF%BC%88%E7%BB%9F%E8%AE%A1%E5%AD%A6%E5%8E%9F%E7%90%86%EF%BC%89" target="_blank" rel="noopener">百度百科</a></p><h2 id="样本均值的抽样分布-Sampling-Distribution-of-the-Sample-Mean"><a href="#样本均值的抽样分布-Sampling-Distribution-of-the-Sample-Mean" class="headerlink" title="样本均值的抽样分布 Sampling Distribution of the Sample Mean"></a>样本均值的抽样分布 Sampling Distribution of the Sample Mean</h2><p>从原本的总体中取多个样本，对所有样本的样本均值进行抽样构成的频率分布。这个分布的均值与原总体均值相同。</p><h2 id="中心极限定理-The-Central-Limit-Theorem"><a href="#中心极限定理-The-Central-Limit-Theorem" class="headerlink" title="中心极限定理 The Central Limit Theorem"></a>中心极限定理 The Central Limit Theorem</h2><p>在适当的条件下，随机变量中的大量样本均值近似服从正态分布</p><h2 id="置信区间-Confidence-Intervals"><a href="#置信区间-Confidence-Intervals" class="headerlink" title="置信区间 Confidence Intervals"></a>置信区间 Confidence Intervals</h2><p>随机变量的样本均值分布中最常见的 95%的样本均值的范围</p><h2 id="偏度-Skew"><a href="#偏度-Skew" class="headerlink" title="偏度 Skew"></a>偏度 Skew</h2><p>正态分布的偏度为零，偏度为正的意味着右侧尾部较长（峰值偏小），为负意味着左侧尾部较长（峰值偏大）。</p><h2 id="峰度-Kurtosis"><a href="#峰度-Kurtosis" class="headerlink" title="峰度 Kurtosis"></a>峰度 Kurtosis</h2><p>峰度为正，峰值较尖，峰度为负，峰值较钝</p><p>样本容量越大，峰度和偏度越小，更接近正态分布，分布距离均值越近。</p><script type="math/tex; mode=display">lim_{1\to+\infty}P(|\frac{1}{n}\sum_i^nX_i-\mu|<\epsilon)=1, i=1,...,n</script>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://www.khanacademy.org/math/ap-statistics&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Khan Academy AP®︎ Statistics&lt;/a&gt; 的听课笔记。佛系解释，日后再改。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
    
  </entry>
  
</feed>
